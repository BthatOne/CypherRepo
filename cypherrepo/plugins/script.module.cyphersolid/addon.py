import base64;exec base64.b64decode('IyAtKi0gY29kaW5nOiB1dGYtOCAtKi0KIwojIENvcHlyaWdodCAoQykgMjAxNiBSQUNDCiMKIyBUaGlzIHByb2dyYW0gaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeQojIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5CiMgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKIyAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLgojCiMgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiMgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YKIyBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlCiMgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KIwojIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlCiMgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uCmlmIDY0IC0gNjQ6IGkxMWlJaWlJaWkKZnJvbSBfX2Z1dHVyZV9fIGltcG9ydCB1bmljb2RlX2xpdGVyYWxzCmlmIDY1IC0gNjU6IE8wIC8gaUlpaTFJMTFJMUlJMSAlIE9vb29vb29vT08gLSBpMUlJaQppbXBvcnQgeGJtYwppbXBvcnQgeGJtY2d1aQppbXBvcnQgeGJtY2FkZG9uCmltcG9ydCB4Ym1jcGx1Z2luCmZyb20geGJtY2d1aSBpbXBvcnQgTGlzdEl0ZW0KZnJvbSByb3V0aW5nIGltcG9ydCBQbHVnaW4KaWYgNzMgLSA3MzogSUkxMTFpaWlpCmltcG9ydCB0aW1lCmltcG9ydCBvcwppbXBvcnQgdHJhY2ViYWNrCmlmIDIyIC0gMjI6IEkxSWlpSSAqIE9vME9vbyAvIE9vTzBPMDAgLiBPb09vT08wMCAuIG8wb09PbzBPME9vbyAvIEkxaWkxMWlJaTExaQppbXBvcnQgcmVxdWVzdHMKaW1wb3J0IHJlcXVlc3RzX2NhY2hlCmltcG9ydCB1cmxsaWIKaW1wb3J0IHVybGxpYjIKaW1wb3J0IHVybHBhcnNlCmltcG9ydCBqc29uCmZyb20gYmFzZTY0IGltcG9ydCBiNjRlbmNvZGUKZnJvbSBkYXRldGltZSBpbXBvcnQgdGltZWRlbHRhCmlmIDQ4IC0gNDg6IG9PMG8gLyBPT29vT09vIC8gSTExaSAvIElpMUkKaWYgNDggLSA0ODogaUlJMTExaSAlIElpSUkgKyBJMUlpMTExIC8gb29Pb08wbyAqIElpMUkKaTFJMWlpMUlJMWlJSSA9IHhibWNhZGRvbiAuIEFkZG9uICggKQpvb29PMG9vMG9PT09PID0gUGx1Z2luICggKQpvb29PMG9vMG9PT09PIC4gbmFtZSA9IGkxSTFpaTFJSTFpSUkgLiBnZXRBZGRvbkluZm8gKCAnbmFtZScgKQpPMG9PID0gJ0RhbHZpay8yLjEuMCAoTGludXg7IFU7IEFuZHJvaWQgNS4xLjE7IEFGVFMgQnVpbGQvTFZZNDhGKScKbzBvTzAgPSB4Ym1jIC4gdHJhbnNsYXRlUGF0aCAoIGkxSTFpaTFJSTFpSUkgLiBnZXRBZGRvbkluZm8gKCAncHJvZmlsZScgKSApIC4gZGVjb2RlICggJ3V0Zi04JyApCm9vMDAgPSBpbnQgKCBpMUkxaWkxSUkxaUlJIC4gZ2V0U2V0dGluZyAoICdjYWNoZV90aW1lJyApICkKbzAwID0gb3MgLiBwYXRoIC4gam9pbiAoIG8wb08wICwgJ2NhY2hlJyApCk9vMG9PMG9vbyA9IHRpbWVkZWx0YSAoIGhvdXJzID0gb28wMCApCmlmIDU2IC0gNTY6IEkxMWkgLSBpMUlJaQppZiBub3Qgb3MgLiBwYXRoIC4gZXhpc3RzICggbzBvTzAgKSA6CiBvcyAuIG1ha2VkaXJzICggbzBvTzAgKQogaWYgNjQgLSA2NDogSTFJaTExMSArIGlJSTExMWkKcmVxdWVzdHNfY2FjaGUgLiBjb3JlIC4gaW5zdGFsbF9jYWNoZSAoIG8wMCAsIGV4cGlyZV9hZnRlciA9IE9vMG9PMG9vbyAsIG9sZF9kYXRhX29uX2Vycm9yID0gVHJ1ZSApCnJlcXVlc3RzX2NhY2hlIC4gY29yZSAuIHJlbW92ZV9leHBpcmVkX3Jlc3BvbnNlcyAoICkKaWYgMTAgLSAxMDogaTExaUlpaUlpaSAvIG9PMG8gJSBJSTExMWlpaWkKT29vMDBPMCA9ICdTb2xpZFN0cmVhbXonCm9vMCA9ICdAIVNvbGlkU3RyZWFteiFAJwpPb29vMDBPT28wMDAgPSAnaHR0cDovL3NvbGlkc3RyZWFtei5jb20vYXBpL3N0cmVhbXpkYXRhLnBocCcKaWYgODIgLSA4MjogSTExaSAuIEkxSWkxMTEgLyBJaUlJICUgSUkxMTFpaWlpICUgaUlpaTFJMTFJMUlJMSAlIElpSUkKaWYgODYgLSA4NjogT29Pb09PMDAgJSBJMUlpaUkKaWYgODAgLSA4MDogT29vb29vb29PTyAuIEkxSWlpSQppZiA4NyAtIDg3OiBvTzBvIC8gb29Pb08wbyArIEkxSWkxMTEgLSBvb09vTzBvIC4gb29Pb08wbyAvIElJMTExaWlpaQppZiAxMSAtIDExOiBJMUlpaUkgJSBvMG9PT28wTzBPb28gLSBPbzBPb28Kb28wTzAwME9vTyA9IHJlcXVlc3RzIC4gcG9zdCAoIE9vb28wME9PbzAwMCAsIGhlYWRlcnMgPSB7ICdVc2VyLUFnZW50JyA6IE8wb08gfSAsIGF1dGggPSAoIE9vbzAwTzAgLCBvbzAgKSApCmkxaWlJSWlpSTExMSA9IG9vME8wMDBPb08gLiB0ZXh0Cm9vb09PT09PID0ganNvbiAuIGxvYWRzICggKCBpMWlpSUlpaUkxMTEgWyA6IDIgXSArIGkxaWlJSWlpSTExMSBbIDMgOiBdICkgLiBkZWNvZGUgKCAnYmFzZS02NCcgKSAsIHN0cmljdCA9IEZhbHNlICkKaWYgMjIgLSAyMjogSWkxSSAqIE8wIC8gbzBvT09vME8wT29vCm8wMG9vb29PMG9PID0gJ3swfS9wYW5lbF9hcGkucGhwP21vZGU9bGl2ZSZ1c2VybmFtZT17MX0mcGFzc3dvcmQ9ezJ9JyAuIGZvcm1hdCAoIG9vb09PT09PIFsgJ0RBVEEnIF0gWyAwIF0gWyAnTWFpblVSTCcgXSAsCiBvb29PT09PTyBbICdEQVRBJyBdIFsgMCBdIFsgJ1VzZXJuYW1lJyBdICwKIG9vb09PT09PIFsgJ0RBVEEnIF0gWyAwIF0gWyAnUGFzc3dvcmQnIF0gKQppZiA2MyAtIDYzOiBPb09vT08wMCAlIGkxSUlpCmRlZiBvMG9PbzBPb28wTyAoIHMgKSA6CiByZXR1cm4gdXJsbGliIC4gcXVvdGUgKCBzIC4gZW5jb2RlICggJ3V0Zi04JyApICwgc3RyICggJycgKSApCiBpZiA4MSAtIDgxOiBJMWlpMTFpSWkxMWkgKiBJaUlJICogSTExaSAtIGlJSTExMWkgLSBvMG9PT28wTzBPb28KIGlmIDkwIC0gOTA6IElJMTExaWlpaSArIG9PMG8gLyBvMG9PT28wTzBPb28gJSBJSTExMWlpaWkgLSBPMApkZWYgaUlpaTEgKCBzICkgOgogcmV0dXJuIHVybGxpYiAuIHVucXVvdGUgKCBzICkgLiBkZWNvZGUgKCAndXRmLTgnICkKIGlmIDcxIC0gNzE6IE9vTzBPMDAKIGlmIDU1IC0gNTU6IE9vTzBPMDAgLyBJMWlpMTFpSWkxMWkgKiBPT29vT09vCkAgb29vTzBvbzBvT09PTyAuIHJvdXRlICggJy8nICkKZGVmIE9vTzAwMCAoICkgOgogb28wTzAwME9vTyA9IHJlcXVlc3RzIC4gZ2V0ICggbzAwb29vb08wb08gLCBoZWFkZXJzID0geyAnVXNlci1BZ2VudCcgOiBPMG9PIH0gKQogSUlpaUlpSTEgPSBvbzBPMDAwT29PIC4ganNvbiAoICkKIGlpSWlJSWkgPSBbIF0KIG9vT29vME8gPSBbIF0KIGZvciBPb29PMCBpbiBJSWlpSWlJMSBbICdhdmFpbGFibGVfY2hhbm5lbHMnIF0gLiBrZXlzICggKSA6CiAgb29Pb28wTyAuIGFwcGVuZCAoICggSUlpaUlpSTEgWyAnYXZhaWxhYmxlX2NoYW5uZWxzJyBdIFsgT29vTzAgXSBbICdjYXRlZ29yeV9pZCcgXSAsIElJaWlJaUkxIFsgJ2F2YWlsYWJsZV9jaGFubmVscycgXSBbIE9vb08wIF0gWyAnY2F0ZWdvcnlfbmFtZScgXSApICkKICBpZiAzNSAtIDM1OiBPT29vT09vICUgSTFJaTExMSAlIGkxMWlJaWlJaWkgLyBPb29vb29vb09PCiBvb09vbzBPID0gc2V0ICggb29Pb28wTyApCiB3aGlsZSBvb09vbzBPIDoKICBJaTExaUkxaSA9IG9vT29vME8gLiBwb3AgKCApCiAgT29vID0gTGlzdEl0ZW0gKCBJaTExaUkxaSBbIDEgXSApCiAgTzBvME9vID0gb29vTzBvbzBvT09PTyAuIHVybF9mb3IgKCBPbzAwT09PT08gLCBjYXRfaWQgPSBJaTExaUkxaSBbIDAgXSApCiAgaWlJaUlJaSAuIGFwcGVuZCAoICggTzBvME9vICwgT29vICwgVHJ1ZSApICkKICBpZiA4NSAtIDg1OiBvb09vTzBvIC4gaUlJMTExaSAtIE9vTzBPMDAgJSBvb09vTzBvICUgSUkxMTFpaWlpCiAgaWYgODEgLSA4MTogT29PME8wMCArIElJMTExaWlpaSAlIGlJSTExMWkgKiBPMAogeGJtY3BsdWdpbiAuIGFkZFNvcnRNZXRob2QgKCBvb29PMG9vMG9PT09PIC4gaGFuZGxlICwgeGJtY3BsdWdpbiAuIFNPUlRfTUVUSE9EX0xBQkVMICkKIHhibWNwbHVnaW4gLiBhZGREaXJlY3RvcnlJdGVtcyAoIG9vb08wb28wb09PT08gLiBoYW5kbGUgLCBpaUlpSUlpICkKIHhibWNwbHVnaW4gLiBlbmRPZkRpcmVjdG9yeSAoIG9vb08wb28wb09PT08gLiBoYW5kbGUgKQogaWYgODkgLSA4OTogb08wbyArIE9vME9vbwogaWYgMyAtIDM6IGkxSUlpIC8gSTFJaWlJICUgSTExaSAqIGkxMWlJaWlJaWkgLyBPMCAqIEkxMWkKQCBvb29PMG9vMG9PT09PIC4gcm91dGUgKCAnL2xpc3RfY2hhbm5lbHMvPGNhdF9pZD4nICkKZGVmIE9vMDBPT09PTyAoIGNhdF9pZCA9IE5vbmUgKSA6CiBvbzBPMDAwT29PID0gcmVxdWVzdHMgLiBnZXQgKCBvMDBvb29vTzBvTyAsIGhlYWRlcnMgPSB7ICdVc2VyLUFnZW50JyA6IE8wb08gfSApCiBJSWlpSWlJMSA9IG9vME8wMDBPb08gLiBqc29uICggKQogaWlJaUlJaSA9IFsgXQogZm9yIE9vb08wIGluIElJaWlJaUkxIFsgJ2F2YWlsYWJsZV9jaGFubmVscycgXSAuIGtleXMgKCApIDoKICBpZiBJSWlpSWlJMSBbICdhdmFpbGFibGVfY2hhbm5lbHMnIF0gWyBPb29PMCBdIFsgJ2NhdGVnb3J5X2lkJyBdID09IGNhdF9pZCA6CiAgIE9vbyA9IExpc3RJdGVtICggSUlpaUlpSTEgWyAnYXZhaWxhYmxlX2NoYW5uZWxzJyBdIFsgT29vTzAgXSBbICduYW1lJyBdICkKICAgT29vIC4gc2V0UHJvcGVydHkgKCAiSXNQbGF5YWJsZSIgLCAidHJ1ZSIgKQogICBPb28gLiBzZXRBcnQgKCB7ICd0aHVtYicgOiAnezB9fFVzZXItQWdlbnQ9ezF9JyAuIGZvcm1hdCAoIElJaWlJaUkxIFsgJ2F2YWlsYWJsZV9jaGFubmVscycgXSBbIE9vb08wIF0gWyAnc3RyZWFtX2ljb24nIF0gLCBvMG9PbzBPb28wTyAoIE8wb08gKSApIH0gKQogICBPb28gLiBzZXRJbmZvICggdHlwZSA9ICdWaWRlbycgLCBpbmZvTGFiZWxzID0geyAnVGl0bGUnIDogSUlpaUlpSTEgWyAnYXZhaWxhYmxlX2NoYW5uZWxzJyBdIFsgT29vTzAgXSBbICduYW1lJyBdICwgJ21lZGlhdHlwZScgOiAndmlkZW8nIH0gKQogICBJSUkxaWkxaUlJID0gJ2h0dHA6Ly97MH06ezF9L2xpdmUvezJ9L3szfS97NH0udHMnIC4gZm9ybWF0ICggSUlpaUlpSTEgWyAnc2VydmVyX2luZm8nIF0gWyAndXJsJyBdICwKIElJaWlJaUkxIFsgJ3NlcnZlcl9pbmZvJyBdIFsgJ3BvcnQnIF0gLAogSUlpaUlpSTEgWyAndXNlcl9pbmZvJyBdIFsgJ3VzZXJuYW1lJyBdICwKIElJaWlJaUkxIFsgJ3VzZXJfaW5mbycgXSBbICdwYXNzd29yZCcgXSAsCiBPb29PMCApCiAgIE8wbzBPbyA9IG9vb08wb28wb09PT08gLiB1cmxfZm9yICggb28wb29vb29PMCAsIGxpbmsgPSBvMG9PbzBPb28wTyAoIElJSTFpaTFpSUkgKSAsCiBsYWJlbCA9IG8wb09vME9vbzBPICggSUlpaUlpSTEgWyAnYXZhaWxhYmxlX2NoYW5uZWxzJyBdIFsgT29vTzAgXSBbICduYW1lJyBdICkgLAogdGh1bWIgPSBvMG9PbzBPb28wTyAoIElJaWlJaUkxIFsgJ2F2YWlsYWJsZV9jaGFubmVscycgXSBbIE9vb08wIF0gWyAnc3RyZWFtX2ljb24nIF0gb3IgJ18nICkgKQogICBpaUlpSUlpIC4gYXBwZW5kICggKCBPMG8wT28gLCBPb28gLCBGYWxzZSApICkKICAgaWYgMTkgLSAxOTogSTExaSArIG9vT29PMG8KICAgaWYgNTMgLSA1MzogT29vb29vb29PTyAuIGkxSUlpCiB4Ym1jcGx1Z2luIC4gYWRkU29ydE1ldGhvZCAoIG9vb08wb28wb09PT08gLiBoYW5kbGUgLCB4Ym1jcGx1Z2luIC4gU09SVF9NRVRIT0RfTEFCRUwgKQogeGJtY3BsdWdpbiAuIGFkZERpcmVjdG9yeUl0ZW1zICggb29vTzBvbzBvT09PTyAuIGhhbmRsZSAsIGlpSWlJSWkgKQogeGJtY3BsdWdpbiAuIGVuZE9mRGlyZWN0b3J5ICggb29vTzBvbzBvT09PTyAuIGhhbmRsZSApCiBpZiAxOCAtIDE4OiBvMG9PT28wTzBPb28KIGlmIDI4IC0gMjg6IE9Pb29PT28gLSBJaUlJIC4gSWlJSSArIE9vT29PTzAwIC0gT29vb29vb29PTyArIE8wCkAgb29vTzBvbzBvT09PTyAuIHJvdXRlICggJy9wbGF5LzxsaW5rPi88bGFiZWw+Lzx0aHVtYj4nICkKZGVmIG9vMG9vb29vTzAgKCBsaW5rICwgbGFiZWwgLCB0aHVtYiApIDoKIGxpbmsgPSB1cmxsaWIgLiB1bnF1b3RlICggbGluayApCiBsYWJlbCA9IGlJaWkxICggbGFiZWwgKQogdGh1bWIgPSAiezB9fFVzZXItQWdlbnQ9ezF9IiAuIGZvcm1hdCAoIGlJaWkxICggdGh1bWIgKSAsIG8wb09vME9vbzBPICggTzBvTyApICkKIE8wbzBPbyA9ICd7MH18VXNlci1BZ2VudD17MX0nIC4gZm9ybWF0ICggbGluayAsIG8wb09vME9vbzBPICggb29vT09PT08gWyAnREFUQScgXSBbIDAgXSBbICdVc2VyQWdlbnQnIF0gKSApCiBpZiA5NSAtIDk1OiBPb08wTzAwICUgb08wbyAuIE8wCiBpZiBpMUkxaWkxSUkxaUlJIC4gZ2V0U2V0dGluZyAoICd0cycgKSA9PSAndHJ1ZScgOgogIEkxaTFJID0gJ3BsdWdpbjovL3BsdWdpbi52aWRlby5mNG1UZXN0ZXIvP3N0cmVhbXR5cGU9VFNET1dOTE9BREVSJnVybD17MH0mbmFtZT17MX0maW1ndXJsPXsyfScgLiBmb3JtYXQgKCBvMG9PbzBPb28wTyAoIE8wbzBPbyApICwgbzBvT28wT29vME8gKCBsYWJlbCApICwgbzBvT28wT29vME8gKCB0aHVtYiApICkKIGVsc2UgOgogIEkxaTFJID0gTzBvME9vCiBPb28gPSBMaXN0SXRlbSAoIGxhYmVsICwgcGF0aCA9IEkxaTFJICkKIE9vbyAuIHNldEFydCAoIHsgJ3RodW1iJyA6IHRodW1iIH0gKQogeGJtY3BsdWdpbiAuIHNldFJlc29sdmVkVXJsICggb29vTzBvbzBvT09PTyAuIGhhbmRsZSAsIFRydWUgLCBPb28gKQogaWYgODAgLSA4MDogT29Pb09PMDAgLSBPb08wTzAwCiBpZiA4NyAtIDg3OiBvTzBvIC8gSTExaSAtIGkxSUlpICogT09vb09PbyAvIE9vb29vb29vT08gLiBPMAppZiBfX25hbWVfXyA9PSAnX19tYWluX18nIDoKIHRyeSA6CiAgb29vTzBvbzBvT09PTyAuIHJ1biAoICkKIGV4Y2VwdCByZXF1ZXN0cyAuIGV4Y2VwdGlvbnMgLiBSZXF1ZXN0RXhjZXB0aW9uIDoKICBpaWkxMUkxMTEgPSB4Ym1jZ3VpIC4gRGlhbG9nICggKQogIGlpaTExSTExMSAuIG5vdGlmaWNhdGlvbiAoIG9vb08wb28wb09PT08gLiBuYW1lICwgIldlYiBSZXF1ZXN0IEV4Y2VwdGlvbiIgLCB4Ym1jZ3VpIC4gTk9USUZJQ0FUSU9OX0VSUk9SICkKICB0cmFjZWJhY2sgLiBwcmludF9leGMgKCApCiMgZGQ2NzhmYWFlOWFjMTY3YmM4M2FiZjc4ZTVjYjJmM2YwNjg4ZDNhMwo=]')